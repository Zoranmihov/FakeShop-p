const express = require("express");
const { v4: uuidv4 } = require("uuid");
const router = express.Router();
const stripe = require("stripe")(
  "sk_test_51JWHDPELOgaxNHUmQTKEnlOtDqDmKxqy6ZR0l1TBgvkd3wrjPEX1GXJIMZmY7On8OVH35YlyLN7aDDLRDFndhLxN00MhjXUPgd"
);
const Ordermodel = require("../models/orderModel");
const Product = require("../models/productModel");

router.post("/placeorder", async (req, res) => {
  // Stripe checkout backend setup:

  const { token, total, currentUser, cartItems } = req.body;
  // Step 1: Create a customer which takes an object with email and source properties
  const customer = await stripe.customers.create({
    email: token.email,
    source: token.id,
  });
  // Step 2: Create a payment object which takes two parameters first one is payment details, second is a unique key generated by uuid
  const payment = await stripe.charges.create(
    {
      amount: total * 100,
      currency: "EUR",
      customer: customer.id,
      receipt_email: token.email,
    },
    {
      idempotencyKey: uuidv4(),
    }
  );

  if (payment) {
    const order = new Ordermodel({
      userid: currentUser._id,
      name: currentUser.name,
      email: currentUser.email,
      orderItems: cartItems,
      shippingAdress: {
        address: token.card.address_line1,
        city: token.card.address_city,
        country: token.card.address_country,
        postalCode: token.card.address_zip,
      },
      orderAmount: total,
      transactionId: payment.source.id,
      isDelivered: false,
    });
    order.save((err) => {
      if (err) {
        return res.status(400).json({ message: "Something went wrong" });
      } else {
        res.send("Order placed successfully");
        cartItems.map(async (item) => {
          let selectedproduct = await Product.findById(item._id);
          let newStock = selectedproduct.countInStock - item.quantity;
          console.log(selectedproduct.countInStock);
          Product.findByIdAndUpdate(
            item._id,
            { countInStock: newStock },
            (err) => {
              console.log(err);
            }
          );
        });
      }
    });
  } else {
    res.status(400).json({ message: "Payment failed" });
  }
});

router.post("/getordersbyuserid", (req, res) => {
  const userid = req.body.userid;
  Ordermodel.find({ userid: userid }, (err, docs) => {
    if (err) {
      res.status(400).json({ message: "Something went wrong" });
    } else {
      res.send(docs);
    }
  });
});

router.post("/getorderbyid", (req, res) => {
  const orderid = req.body.orderid;
  Ordermodel.find({ _id: orderid }, (err, docs) => {
    if (err) {
      res.status(400).json({ message: "Something went wrong" });
    } else {
      res.send(docs[0]);
    }
  });
});

router.get("/getallorders", (req, res) => {
  Ordermodel.find({}, (err, docs) => {
    if (!err) {
      return res.status(200).send(docs);
    } else {
      return res.status(400).json({ message: err });
    }
  });
});

router.post("/deleteorder", (req, res) => {
  const { orderid } = req.body;
  Ordermodel.findByIdAndDelete(orderid, (err) => {
    if (err) {
      res.status(400).json({ message: "Something went wrong" });
    } else {
      res.send("Order deleted successfuly");
    }
  });
});

router.post("/toggleorder", (req, res) => {
  const { orderid, orderstatus } = req.body;
  Ordermodel.findByIdAndUpdate(
    orderid,
    {
      isDelivered: orderstatus,
    },
    (err) => {
      if (err) {
        res.status(400).json("Something went wrong");
      } else {
        res.send("Order updated");
      }
    }
  );
});

module.exports = router;
